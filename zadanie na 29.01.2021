{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "ARABIC_TO_ROMANS = [\n",
    "    {\n",
    "        1: \"I\",\n",
    "        2: \"II\",\n",
    "        3: \"III\",\n",
    "        4: \"IV\",\n",
    "        5: \"V\",\n",
    "        6: \"VI\",\n",
    "        7: \"VII\",\n",
    "        8: \"VIII\",\n",
    "        9: \"IX\",\n",
    "    },\n",
    "    {\n",
    "        1: \"X\",\n",
    "        2: \"XX\",\n",
    "        3: \"XXX\",\n",
    "        4: \"XL\",\n",
    "        5: \"L\",\n",
    "        6: \"LX\",\n",
    "        7: \"LXX\",\n",
    "        8: \"LXXX\",\n",
    "        9: \"XC\",\n",
    "    },\n",
    "    {\n",
    "        1: \"C\",\n",
    "        2: \"CC\",\n",
    "        3: \"CCC\",\n",
    "        4: \"CD\",\n",
    "        5: \"D\",\n",
    "        6: \"DC\",\n",
    "        7: \"DCC\",\n",
    "        8: \"DCCC\",\n",
    "        9: \"CM\",\n",
    "    },\n",
    "    {\n",
    "        1: \"M\",\n",
    "        2: \"MM\",\n",
    "        3: \"MMM\",\n",
    "    },\n",
    "]\n",
    "\n",
    "\n",
    "def toRoman(value: str or int) -> str:\n",
    "    \n",
    "    value = int(value)\n",
    "    index = 0\n",
    "    out = []\n",
    "    while value: \n",
    "        place_digit = value % 10\n",
    "        if place_digit:\n",
    "            \n",
    "            NUMERALS_DICT = ARABIC_TO_ROMANS[index]\n",
    "            out.insert(0, NUMERALS_DICT[place_digit])\n",
    "        \n",
    "        value //= 10\n",
    "        index += 1\n",
    "        return \"\".join(out)\n",
    "\n",
    "\n",
    "def toArabic(value: str) -> int:\n",
    "    index = 0\n",
    "    out = 0\n",
    "    while value:\n",
    "        possible_roman = \"\"\n",
    "        possible_arabic = 0\n",
    "        for arabic, roman in ARABIC_TO_ROMANS[index].items():\n",
    "            if value.find(roman) != -1:\n",
    "                possible_roman = roman\n",
    "                possible_arabic = arabic\n",
    "        value = value.replace(possible_roman, \"\")\n",
    "        out += possible_arabic * 10 ** index\n",
    "        index += 1\n",
    "    return out\n",
    "\n",
    "\n",
    "print(toRoman(123))\n",
    "print(toArabic(\"CXXIII\"))\n",
    "\n",
    "print(toRoman(635))\n",
    "print(toArabic(\"DCXXXV\"))\n",
    "\n",
    "print(toRoman(2015))\n",
    "print(toArabic(\"MMXV\"))\n",
    "\n",
    "print(toRoman(2637))\n",
    "print(toArabic(\"MMDCXXXVII\"))\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
